// <auto-generated />
using System;
using EcommerceV4.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcommerceV4.Infrastructure.Migrations
{
    [DbContext(typeof(EcommerceDbContext))]
    [Migration("20250921082949_addTimeStemp")]
    partial class addTimeStemp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.CompanyAggregate.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.OrderAggregate.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StoreId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.ProductAggregate.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasColumnType("text");

                    b.Property<string>("ColorName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant", (string)null);
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.StoreAggregate.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Store", (string)null);
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.CompanyAggregate.Company", b =>
                {
                    b.OwnsOne("EcommerceV4.Domain.Common.ValueObjects.AddressObject", "Address", b1 =>
                        {
                            b1.Property<int>("CompanyId")
                                .HasColumnType("integer");

                            b1.Property<string>("AddressDetail")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("addressDetail");

                            b1.Property<int?>("City")
                                .HasColumnType("integer")
                                .HasColumnName("city");

                            b1.Property<int?>("Commune")
                                .HasColumnType("integer")
                                .HasColumnName("commune");

                            b1.Property<int?>("District")
                                .HasColumnType("integer")
                                .HasColumnName("district");

                            b1.HasKey("CompanyId");

                            b1.ToTable("Company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.HasOne("EcommerceV4.Domain.Aggregates.UserAggregate.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("EcommerceV4.Domain.Aggregates.OrderAggregate.AddressObject", "Address", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("integer");

                            b1.Property<string>("AddressDetail")
                                .HasColumnType("text")
                                .HasColumnName("address_detail");

                            b1.Property<int?>("City")
                                .HasColumnType("integer")
                                .HasColumnName("city");

                            b1.Property<int?>("Commune")
                                .HasColumnType("integer")
                                .HasColumnName("commune");

                            b1.Property<int?>("District")
                                .HasColumnType("integer")
                                .HasColumnName("district");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.OrderAggregate.OrderDetail", b =>
                {
                    b.HasOne("EcommerceV4.Domain.Aggregates.OrderAggregate.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceV4.Domain.Aggregates.ProductAggregate.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("EcommerceV4.Domain.Aggregates.OrderAggregate.ProductInfoObject", "ProductInfo", b1 =>
                        {
                            b1.Property<int>("OrderDetailId")
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .HasColumnType("text")
                                .HasColumnName("description");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("productName");

                            b1.Property<string>("UrlImageDefault")
                                .HasColumnType("text")
                                .HasColumnName("url_image_default");

                            b1.HasKey("OrderDetailId");

                            b1.ToTable("OrderDetail");

                            b1.WithOwner()
                                .HasForeignKey("OrderDetailId");
                        });

                    b.OwnsOne("EcommerceV4.Domain.Common.ValueObjects.MoneyObject", "Money", b1 =>
                        {
                            b1.Property<int>("OrderDetailId")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Discount")
                                .HasColumnType("numeric")
                                .HasColumnName("discount");

                            b1.Property<decimal>("Price")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("price");

                            b1.HasKey("OrderDetailId");

                            b1.ToTable("OrderDetail");

                            b1.WithOwner()
                                .HasForeignKey("OrderDetailId");
                        });

                    b.Navigation("Money")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductInfo");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("EcommerceV4.Domain.Aggregates.CompanyAggregate.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId");

                    b.HasOne("EcommerceV4.Domain.Aggregates.StoreAggregate.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.Navigation("Company");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.ProductAggregate.ProductVariant", b =>
                {
                    b.HasOne("EcommerceV4.Domain.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.StoreAggregate.Store", b =>
                {
                    b.OwnsOne("EcommerceV4.Domain.Common.ValueObjects.AddressObject", "Address", b1 =>
                        {
                            b1.Property<int>("StoreId")
                                .HasColumnType("integer");

                            b1.Property<string>("AddressDetail")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("addressDetail");

                            b1.Property<int?>("City")
                                .HasColumnType("integer")
                                .HasColumnName("city");

                            b1.Property<int?>("Commune")
                                .HasColumnType("integer")
                                .HasColumnName("commune");

                            b1.Property<int?>("District")
                                .HasColumnType("integer")
                                .HasColumnName("district");

                            b1.HasKey("StoreId");

                            b1.ToTable("Store");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.CompanyAggregate.Company", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.StoreAggregate.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceV4.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
